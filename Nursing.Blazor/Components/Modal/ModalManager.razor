﻿@using System.Collections.ObjectModel
@using Microsoft.AspNetCore.Components.Routing
@using Nursing.Blazor.Models

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<CascadingValue Value="this">
    @foreach (var modal in _modals)
    {
        @modal.ModalInstance
    }
</CascadingValue>

@code {
    [CascadingParameter] private BootstrapModalService CascadedModalService { get; set; } = default!;

    private readonly Collection<BootstrapModalReference> _modals = new();
    private bool _haveActiveModals;

    internal event Action? OnModalClosed;

    protected override void OnInitialized()
    {
        if (CascadedModalService == null)
        {
            throw new InvalidOperationException($"{GetType()} requires a cascading parameter of type {nameof(BootstrapModalService)}.");
        }

        CascadedModalService.OnModalInstanceAdded += Update;
        CascadedModalService.OnModalCloseRequested += CloseInstance;
        NavigationManager.LocationChanged += CancelModals;
    }

    private async Task Update(BootstrapModalReference modalReference)
    {
        _modals.Add(modalReference);

        if (!_haveActiveModals)
        {
            _haveActiveModals = true;
        }

        await InvokeAsync(StateHasChanged);
    }

    internal async Task CloseInstance(BootstrapModalReference? modal, ModalResult result)
    {
        if (modal?.ModalInstanceRef != null)
        {
            // Gracefully close the modal
            await modal.ModalInstanceRef.Close(result);
            OnModalClosed?.Invoke();
        }
        else
        {
            await DismissInstance(modal, result);
        }
    }

    internal Task DismissInstance(Guid id, ModalResult result)
    {
        var reference = GetModalReference(id);
        return DismissInstance(reference, result);
    }

    internal async Task DismissInstance(BootstrapModalReference? modal, ModalResult result)
    {
        if (modal != null)
        {
            modal.Dismiss(result);
            _modals.Remove(modal);
            await InvokeAsync(StateHasChanged);
            OnModalClosed?.Invoke();
        }
    }

    private async void CancelModals(object? sender, LocationChangedEventArgs e)
    {
        foreach (var modalReference in _modals.ToList())
        {
            modalReference.Dismiss(ModalResult.Cancel());
        }

        _modals.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private BootstrapModalReference? GetModalReference(Guid id)
        => _modals.SingleOrDefault(x => x.Id == id);
}
