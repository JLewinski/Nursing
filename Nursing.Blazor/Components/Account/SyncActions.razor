@using Nursing.Blazor.Services
@inject NavigationManager Navigation
@inject SyncService Sync
@inject CacheService Cache
@inject IJSRuntime JSRuntime
@inject IToastService toastService

<div class="container">
    <div class="row mt-3">
        <div class="col-6">
            <span>Last Synced: @(settings.LastSync == DateTime.MinValue ? "Never" : settings.LastSync.ToShortDateString() + " " + settings.LastSync.ToShortTimeString())</span>
            <button type="button" @onclick="SyncNow" class="btn btn-primary">
                Sync Now
            </button>
        </div>
        <div class="col-6">
            <button type="button" @onclick="Logout" class="btn btn-secondary">
                Log Out
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-12 my-3">
            <h2>Change Password</h2>
        </div>
    </div>
    <form class="row mb-3" @onsubmit="ChangePassword">
        <div class="col-6">
            <div class="mb-3">
                <label for="currentPassword" class="form-label">Current Password</label>
                <input type="password" class="form-control" @bind="CurrentPassword" id="currentPassword" />
            </div>
        </div>
        <div class="col-6">
            <div class="mb-3">
                <label for="newPassword" class="form-label">New Password</label>
                <input type="password" class="form-control" @bind="NewPassword" id="newPassword" />
            </div>
        </div>
        <div class="col-6">
            <button type="submit" class="btn btn-primary">
                Change Password
            </button>
        </div>
    </form>
    <button class="btn btn-outline-danger" @onclick="Delete">Delete Account</button>
</div>

@code {
    private Settings settings = new();

    protected override async Task OnParametersSetAsync()
    {
        settings = await Cache.GetSettings();
    }

    private async Task SyncNow()
    {
        var result = await JSRuntime.ShowLoadingModal(async () => await Sync.Sync());
        toastService.ShowToast(result.message, result.success);
    }

    private async Task Logout()
    {
        await Sync.Logout();
        Navigation.NavigateTo("/login");
    }

    private string CurrentPassword = string.Empty;
    private string NewPassword = string.Empty;

    private async Task ChangePassword()
    {
        var result = await JSRuntime.ShowLoadingModal(async () => await Sync.ChangePassword(CurrentPassword, NewPassword));
        toastService.ShowToast(result.message, result.success);
    }

    [CascadingParameter] private IModalService modalService { get; set; } = null!;

    private async Task Delete()
    {
        ModalParameters parameters = new()
        {
            { "Message", "Are you sure you want to delete your account? This will also delete all your data if another account does not have access." }
        };
        var modal = modalService.Show<Components.Modal.ConfirmationModal>("Delete Account", parameters);
        var modalResult = await modal.Result;
        if (modalResult.Cancelled)
        {
            return;
        }

        var result = await JSRuntime.ShowLoadingModal(async () => await Sync.Delete(await Sync.GetUsername()));
        if (result.success)
        {
            Navigation.NavigateTo("/login");
        }
        toastService.ShowToast(result.message, result.success);
    }
}