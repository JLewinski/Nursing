@page "/"
@inject NavigationManager Navigation
@inject Services.IDatabase Database

<div class="container text-center">
    <div class="row">
        @if (startTime.HasValue)
        {
            <div class="col-12">
                <p>Started: @startTime.Value.ToLocalTime().ToShortTimeString()</p>
            </div>
        }
        else if (lastTime.HasValue)
        {
            var lastTimeValue = lastTime.Value;
            <div class="col-6">
                <p class="p-0 m-0">Last Fed</p>
                <p class="p-0 m-0">@lastTimeValue.ToLocalTime().ToShortTimeString()</p>
                <p><DurationCount StartTime="lastTimeValue" ShowHours="true" IsTimer="true" /></p>
            </div>
            var nextFeeding = lastTimeValue + TimeBetweenFeedings;
            <div class="col-6">
                <p class="p-0 m-0">Next Feeding</p>
                <p class="p-0 m-0">@nextFeeding.ToLocalTime().ToShortTimeString()</p>
                <p><DurationCount EndTime="nextFeeding" ShowHours="true" IsTimer="true" /></p>
            </div>
        }
    </div>
    <div class="row">
        <div class="col-6">
            @if (leftRightNeither == LeftRightNeither.Left)
            {
            //TODO: Make this a badge (bootstrap)
                <p class="badge rounded-pill text-bg-info">Last Used</p>
            }
            else
            {
                <p></p>
            }
        </div>
        <div class="col-6">
            @if (leftRightNeither == LeftRightNeither.Right)
            {
                <p>Last Used</p>
            }
            else
            {
                <p></p>
            }
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-6">
            <BoobTimer Feedings="feeding.LeftBreast" OnToggle="Save" />
        </div>
        <div class="col-6">
            <BoobTimer Feedings="feeding.RightBreast" OnToggle="Save" />
        </div>
    </div>

    @if (startTime.HasValue)
    {
        <div class="row">
            <div class="d-grid gap-2 col-6 mx-auto">
                <button class="btn btn-primary" @onclick=Reset>Reset</button>
            </div>
            <div class="d-grid gap-2 col-6 mx-auto">
                <button class="btn btn-primary" @onclick=Finish>Finish</button>
            </div>
        </div>
        <div class="mt-5 row">
            <table class="table table-borderless table-striped table-responsive align-middle d-none d-md-table">
                <thead>
                    <tr>
                        <th>Left Start</th>
                        <th>Left End</th>
                        <th>Right Start</th>
                        <th>Right End</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var leftIndex = feeding.LeftBreast.Count;
                        var rightIndex = feeding.RightBreast.Count;
                    }
                    @while (leftIndex > 0 || rightIndex > 0)
                    {
                        <tr>
                            @if (--leftIndex >= 0)
                            {
                                var startFinish = feeding.LeftBreast[leftIndex];
                                <td>@LocalTimeString(startFinish.StartTime)</td>
                                <td>@LocalTimeString(startFinish.EndTime)</td>
                            }
                            else
                            {
                                <td></td>
                                <td></td>
                            }
                            @if (--rightIndex >= 0)
                            {
                                var startFinish = feeding.RightBreast[rightIndex];
                                <td>@LocalTimeString(startFinish.StartTime)</td>
                                <td>@LocalTimeString(startFinish.EndTime)</td>
                            }
                            else
                            {
                                <td></td>
                                <td></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>
@code {
    enum LeftRightNeither
    {
        Left,
        Right,
        Neither
    }

    private string LocalTimeString(DateTime? time, string? prefix = null)
    {
        if (time == null)
        {
            return string.Empty;
        }

        return $"{prefix}{time.Value.ToLocalTime().ToString("h:mm:ss tt")}";
    }

    private Feeding feeding = new Feeding();

    private DateTime? startTime;
    private DateTime? lastTime;
    private TimeSpan TimeBetweenFeedings;

    private TimeSpan LeftTotal = TimeSpan.Zero;
    private TimeSpan RightTotal = TimeSpan.Zero;

    private bool leftInProgress = false;
    private bool rightInProgress = false;

    private string LeftText => leftInProgress ? "End Left" : "Start Left";
    private string RightText => rightInProgress ? "End Right" : "Start Right";

    private LeftRightNeither leftRightNeither = LeftRightNeither.Neither;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        TimeBetweenFeedings = await Database.GetInBetween();
        await Load();
    }

    private async Task Load()
    {
        var last2 = await Database.GetLast();
        var last = last2.FirstOrDefault();
        if (last != null && !last.IsFinished)
        {
            Load(last);
            if (last2.Count == 2)
            {
                var previous = last2.Last();
                if (previous != null)
                {
                    LoadPrevious(previous);
                }
            }
        }
        else if (last != null)
        {
            LoadPrevious(last);
        }
    }

    private void Load(Feeding loadedFeeding)
    {
        feeding = loadedFeeding;
        if (feeding.LeftBreast.Count > 0)
        {
            leftInProgress = feeding.LeftBreast.Last().EndTime == null;
            startTime = feeding.LeftBreast.First().StartTime;
        }

        if (feeding.RightBreast.Count > 0)
        {
            rightInProgress = feeding.RightBreast.Last().EndTime == null;
            if (startTime == null || feeding.RightBreast.First().StartTime < startTime)
            {
                startTime = feeding.RightBreast.First().StartTime;
            }
        }
    }

    public async Task<Feeding?> Load(string path)
    {
        if (!File.Exists(path))
        {
            return null;
        }

        var data = await File.ReadAllTextAsync(path);
        var cachedFeeding = System.Text.Json.JsonSerializer.Deserialize<Feeding>(data);
        return cachedFeeding;
    }

    private void LoadPrevious(Feeding previousFeeding)
    {
        lastTime = previousFeeding.Started;
        var maxLeft = previousFeeding.LeftBreast.Count > 0 ? previousFeeding.LeftBreast.Max(x => x.EndTime) : null;
        var maxRight = previousFeeding.RightBreast.Count > 0 ? previousFeeding.RightBreast.Max(x => x.EndTime) : null;

        if (maxLeft.HasValue && maxRight.HasValue)
        {
            if (maxLeft > maxRight)
            {
                leftRightNeither = LeftRightNeither.Left;
            }
            else
            {
                leftRightNeither = LeftRightNeither.Right;
            }
        }
        else if (maxLeft.HasValue)
        {
            leftRightNeither = LeftRightNeither.Left;
        }
        else if (maxRight.HasValue)
        {
            leftRightNeither = LeftRightNeither.Right;
        }
    }

    private async Task Save()
    {
        if (startTime is null)
        {
            startTime = feeding.LeftBreast.FirstOrDefault()?.StartTime ?? feeding.RightBreast.FirstOrDefault()?.StartTime;

            if (startTime is null)
            {
                throw new InvalidOperationException("Start time is null");
            }

            feeding.Started = startTime.Value;
            await InvokeAsync(StateHasChanged);
        }

        await Database.SaveFeeding(feeding);
    }

    private async Task Reset()
    {
        await Database.Delete(feeding);
        Navigation.Refresh();
    }

    private async Task Finish()
    {
        if (leftInProgress)
        {
            feeding.EndLeftBreast();
            leftInProgress = false;
        }

        if (rightInProgress)
        {
            feeding.EndRightBreast();
            rightInProgress = false;
        }

        feeding.Finished = DateTime.UtcNow;
        feeding.IsFinished = true;

        await Save();

        Navigation.Refresh();
    }

}