@page "/"
@using Nursing.Mobile.Services
@inject NavigationManager Navigation
@inject Nursing.Services.EFDatabase Database
@inject Nursing.Mobile.Services.CacheService Cache

<div class="container text-center">
    <div class="row">
        @if (startTime.HasValue)
        {
            <div class="col-12">
                <p>Started: @startTime.Value.ToLocalTime().ToShortTimeString()</p>
                <p class="h3"><DurationCount @ref="totalDuration" Duration="feeding.TotalTime" /></p>
            </div>
        }
        else if (lastTime.HasValue)
        {
            var lastTimeValue = lastTime.Value;
            var nextFeeding = lastTimeValue + TimeBetweenFeedings;
            <table class="table table-striped table-borderless table-responsive text-center">
                <thead>
                    <tr>
                        <th>Last</th>
                        <th>Next</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@lastTimeValue.ToLocalTime().ToShortTimeString()</td>
                        <td>@((lastTimeValue + TimeBetweenFeedings).ToLocalTime().ToShortTimeString())</td>
                    </tr>
                    <tr>
                        <td><DurationCount StartTime="lastTimeValue" ShowHours="true" IsTimer="true" /></td>
                        <td><DurationCount EndTime="nextFeeding" ShowHours="true" IsTimer="true" /></td>
                    </tr>
                </tbody>
            </table>
        }
    </div>
    <div class="row">
        <div class="col-6">
            @if (leftRightNeither == LeftRightNeither.Left)
            {
                <p class="badge rounded-pill text-bg-info px-3">Last Used</p>
            }
            else
            {
                <p></p>
            }
        </div>
        <div class="col-6">
            @if (leftRightNeither == LeftRightNeither.Right)
            {
                <p class="badge rounded-pill text-bg-info px-3">Last Used</p>
            }
            else
            {
                <p></p>
            }
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-6">
            <BoobTimer ViewModel="feeding" IsLeft="true" OnToggle="Save" OnUpdate="ManualUpdate" />
        </div>
        <div class="col-6">
            <BoobTimer ViewModel="feeding" IsLeft="false" OnToggle="Save" OnUpdate="ManualUpdate" />
        </div>
    </div>
</div>

@if (startTime.HasValue)
{
    <div class="container">
        <div class="row">
            <div class="d-grid gap-2 col-6 mx-auto">
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#resedModal">Reset</button>
            </div>
            <div class="d-grid gap-2 col-6 mx-auto">
                <button class="btn btn-primary" @onclick=Finish>Finish</button>
            </div>
        </div>
        <div class="mt-5 row">
            <table class="table table-borderless table-striped table-responsive align-middle d-none d-md-table">
                <thead>
                    <tr>
                        <th>Left Start</th>
                        <th>Left End</th>
                        <th>Right Start</th>
                        <th>Right End</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var leftIndex = feeding.LeftBreast.Count;
                        var rightIndex = feeding.RightBreast.Count;
                    }
                    @while (leftIndex > 0 || rightIndex > 0)
                    {
                        <tr>
                            @if (--leftIndex >= 0)
                            {
                                var startFinish = feeding.LeftBreast[leftIndex];
                                <td>@LocalTimeString(startFinish.StartTime)</td>
                                <td>@LocalTimeString(startFinish.EndTime)</td>
                            }
                            else
                            {
                                <td></td>
                                <td></td>
                            }
                            @if (--rightIndex >= 0)
                            {
                                var startFinish = feeding.RightBreast[rightIndex];
                                <td>@LocalTimeString(startFinish.StartTime)</td>
                                <td>@LocalTimeString(startFinish.EndTime)</td>
                            }
                            else
                            {
                                <td></td>
                                <td></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

<div
    class="modal fade"
    id="resedModal"
    tabindex="-1"
    data-bs-backdrop="static"
    data-bs-keyboard="false"
    
    role="dialog"
    aria-labelledby="resetModalTitle"
    aria-hidden="true"
>
    <div
        class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-sm"
        role="document"
    >
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="resetModalTitle">
                    Reset
                </h5>
                <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                    aria-label="Close"
                ></button>
            </div>
            <div class="modal-body">Are you sure you want to reset.</div>
            <div class="modal-footer">
                <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                >
                    Close
                </button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick=Reset>Reset</button>
            </div>
        </div>
    </div>
</div>

@code {
    private DurationCount totalDuration = null!;
    private Task ManualUpdate()
    {
        return totalDuration?.ManualUpdate(feeding.TotalTime) ?? Task.FromResult<object?>(null);
    }

    enum LeftRightNeither
    {
        Left,
        Right,
        Neither
    }

    private string LocalTimeString(DateTime? time, string? prefix = null)
    {
        if (time == null)
        {
            return string.Empty;
        }

        return $"{prefix}{time.Value.ToLocalTime().ToString("h:mm:ss tt")}";
    }

    private Feeding feeding = new Feeding();

    private DateTime? startTime;
    private DateTime? lastTime;
    private TimeSpan TimeBetweenFeedings;

    private TimeSpan LeftTotal = TimeSpan.Zero;
    private TimeSpan RightTotal = TimeSpan.Zero;

    private bool leftInProgress = false;
    private bool rightInProgress = false;

    private string LeftText => leftInProgress ? "End Left" : "Start Left";
    private string RightText => rightInProgress ? "End Right" : "Start Right";

    private LeftRightNeither leftRightNeither = LeftRightNeither.Neither;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var settings = await Cache.GetSettings();
        TimeBetweenFeedings = settings.Duration;
        await Load();
    }

    private async Task Load()
    {
        var cache = await Cache.Get();
        feeding = cache.CurrentFeeding;
        lastTime = cache.LastStart;
        startTime = !feeding.IsFinished && feeding.Started > DateTime.MinValue ? feeding.Started : null;
        leftRightNeither = cache.LastWasLeft switch
        {
            true => LeftRightNeither.Left,
            false => LeftRightNeither.Right,
            _ => LeftRightNeither.Neither
        };
    }

    private Task Toggle(bool? leftRightStart)
    {
        if (leftRightStart is bool left)
        {
            if (left)
            {
                feeding.EndRightBreast();
            }
            else
            {
                feeding.EndLeftBreast();
            }
        }
        return Save();
    }

    private async Task Save()
    {
        if (startTime is null)
        {
            startTime = feeding.LeftBreast.FirstOrDefault()?.StartTime ?? feeding.RightBreast.FirstOrDefault()?.StartTime;

            if (startTime is null)
            {
                throw new InvalidOperationException("Start time is null");
            }

            feeding.Started = startTime.Value;
            await InvokeAsync(StateHasChanged);
        }

        await Cache.Cache(feeding);

        await Database.SaveFeeding(feeding);
    }

    private async Task Reset()
    {
        await Database.Delete(feeding);
        await Cache.Cache(new Feeding(await Database.GetLast()));
        Navigation.Refresh();
    }

    private async Task Finish()
    {
        feeding.Finish();

        await Save();

        Navigation.Refresh();
    }

}