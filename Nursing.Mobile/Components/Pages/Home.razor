@page "/"
@inject NavigationManager Navigation
@inject Services.IDatabase Database

<div class="container text-center">
    <div class="row">
        <h1>Feed!</h1>

        @if (startTime.HasValue)
        {
            <div class="col-12">
                <p>Started: @startTime.Value.ToLocalTime().ToString("h:mm tt")</p>
            </div>
        }
        else if (lastTime.HasValue)
        {
            var duration = DateTime.UtcNow - lastTime.Value;

            <div class="col-6">
                <p>Last Fed: @lastTime.Value.ToLocalTime().ToString("h:mm tt")</p>
                <p>@(((int)duration.TotalHours).ToString("00")):@duration.Minutes.ToString("00"):@duration.Seconds.ToString("00") Ago</p>
            </div>
            var nextFeeding = lastTime.Value.ToLocalTime() + TimeBetweenFeedings;
            var timeUntilNext = nextFeeding - DateTime.Now;
            <div class="col-6">
                <p>Next Feeding: @nextFeeding.ToString("h:mm tt")</p>
                <p>@(timeUntilNext < TimeSpan.Zero ? "-" : "")@(((int)timeUntilNext.TotalHours).ToString("00")):@timeUntilNext.Minutes.ToString("00"):@timeUntilNext.Seconds.ToString("00") To Go</p>
            </div>
        }
    </div>
    @if (!feeding.IsFinished)
    {
        <div class="row">
            <div class="d-grid gap-2 col-6 mx-auto">
                <button class="btn btn-primary" @onclick=ToggleLeft>@LeftText</button>
            </div>
            <div class="d-grid gap-2 col-6 mx-auto">
                <button class="btn btn-primary" @onclick=ToggleRight>@RightText</button>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-6">
            @if (leftRightNeither == LeftRightNeither.Left)
            {
                <p>Last Used</p>
            }
        </div>
        <div class="col-6">
            @if (leftRightNeither == LeftRightNeither.Right)
            {
                <p>Last Used</p>
            }
        </div>
    </div>
    @if (feeding.LeftBreast.Count > 0 || feeding.RightBreast.Count > 0)
    {
        <div class="row">
            <div class="col-6">
                <p>@LeftTotal</p>
            </div>
            <div class="col-6">
                <p>@RightTotal</p>
            </div>
        </div>
        <div class="row">
            <div class="d-grid gap-2 col-6 mx-auto">
                <button class="btn btn-primary" @onclick=Reset>Reset</button>
            </div>
            <div class="d-grid gap-2 col-6 mx-auto">
                <button class="btn btn-primary" @onclick=Finish>Finish</button>
            </div>
        </div>
        <table class="table table-borderless table-striped table-responsive align-middle mt-5">
            <tbody>
                @{
                    var leftIndex = feeding.LeftBreast.Count;
                    var rightIndex = feeding.RightBreast.Count;
                }
                @while (leftIndex > 0 || rightIndex > 0)
                {
                    <tr>
                        @if (--leftIndex >= 0)
                        {
                            var startFinish = feeding.LeftBreast[leftIndex];
                            <td class="col-3">@startFinish.StartTime.ToLocalTime().ToString("'Start: 'h:mm:ss tt")</td>
                            <td class="col-3">@(startFinish.EndTime?.ToLocalTime().ToString("'End: 'h:mm:ss tt"))</td>
                        }
                        else
                        {
                            <td class="col-3"></td>
                            <td class="col-3"></td>
                        }
                        @if (--rightIndex >= 0)
                        {
                            var startFinish = feeding.RightBreast[rightIndex];
                            <td class="col-3">@startFinish.StartTime.ToLocalTime().ToString("'Start: 'h:mm:ss tt")</td>
                            <td class="col-3">@(startFinish.EndTime?.ToLocalTime().ToString("'End: 'h:mm:ss tt"))</td>
                        }
                        else
                        {
                            <td class="col-3"></td>
                            <td class="col-3"></td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@code {
    enum LeftRightNeither
    {
        Left,
        Right,
        Neither
    }

    private Feeding feeding = new Feeding();

    private DateTime? startTime;
    private DateTime? lastTime;
    private TimeSpan TimeBetweenFeedings;

    private string LeftTotal = "00:00";
    private string RightTotal = "00:00";

    private bool leftInProgress = false;
    private bool rightInProgress = false;

    private string LeftText => leftInProgress ? "End Left" : "Start Left";
    private string RightText => rightInProgress ? "End Right" : "Start Right";

    private LeftRightNeither leftRightNeither = LeftRightNeither.Neither;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        TimeBetweenFeedings = await Database.GetInBetween();
        new Timer(async _ =>
        {
            if (startTime == null)
            {
                await InvokeAsync(StateHasChanged);
                return;
            }
            var updatedLeft = UpdateLeft();
            var updatedRight = UpdateRight();
            if (updatedLeft || updatedRight)
            {
                await InvokeAsync(StateHasChanged);
            }
        }, null, 0, 100);
        await Load();
    }

    private async Task Load()
    {
        var last2 = await Database.GetLast();

        var last = last2.FirstOrDefault();
        if (last != null && !last.IsFinished)
        {
            Load(last);
            if (last2.Count == 2)
            {
                var previous = last2.Last();
                if (previous != null)
                {
                    LoadPrevious(previous);
                }
            }
        }
        else if (last != null)
        {
            LoadPrevious(last);
        }
    }

    private void Load(Feeding loadedFeeding)
    {
        feeding = loadedFeeding;
        if (feeding.LeftBreast.Count > 0)
        {
            leftInProgress = feeding.LeftBreast.Last().EndTime == null;
            startTime = feeding.LeftBreast.First().StartTime;
        }

        if (feeding.RightBreast.Count > 0)
        {
            rightInProgress = feeding.RightBreast.Last().EndTime == null;
            if (startTime == null || feeding.RightBreast.First().StartTime < startTime)
            {
                startTime = feeding.RightBreast.First().StartTime;
            }
        }
    }

    public async Task<Feeding?> Load(string path)
    {
        if (!File.Exists(path))
        {
            return null;
        }

        var data = await File.ReadAllTextAsync(path);
        var cachedFeeding = System.Text.Json.JsonSerializer.Deserialize<Feeding>(data);
        return cachedFeeding;
    }

    private void LoadPrevious(Feeding previousFeeding)
    {
        lastTime = previousFeeding.FirstFinish;
        var maxLeft = previousFeeding.LeftBreast.Count > 0 ? previousFeeding.LeftBreast.Max(x => x.EndTime) : null;
        var maxRight = previousFeeding.RightBreast.Count > 0 ? previousFeeding.RightBreast.Max(x => x.EndTime) : null;

        if (maxLeft.HasValue && maxRight.HasValue)
        {
            if (maxLeft > maxRight)
            {
                leftRightNeither = LeftRightNeither.Left;
            }
            else
            {
                leftRightNeither = LeftRightNeither.Right;
            }
        }
        else if (maxLeft.HasValue)
        {
            leftRightNeither = LeftRightNeither.Left;
        }
        else if (maxRight.HasValue)
        {
            leftRightNeither = LeftRightNeither.Right;
        }
    }

    private async Task Save()
    {
        await Database.SaveFeeding(feeding);
    }

    private async Task Reset()
    {
        await Database.Delete(feeding.Id);
        Navigation.Refresh();
    }

    private async Task Finish()
    {
        if (leftInProgress)
        {
            feeding.EndLeftBreast();
            leftInProgress = false;
        }

        if (rightInProgress)
        {
            feeding.EndRightBreast();
            rightInProgress = false;
        }

        feeding.IsFinished = true;

        await Save();

        Navigation.Refresh();
    }

    private bool UpdateLeft()
    {
        var total = feeding.GetTotalTime(feeding.LeftBreast);
        var text = total.TotalMinutes.ToString("00") + ":" + total.Seconds.ToString("00");
        if (text.Equals(LeftTotal))
        {
            return false;
        }
        LeftTotal = text;
        return true;
    }

    private bool UpdateRight()
    {
        var total = feeding.GetTotalTime(feeding.RightBreast);
        var text = total.TotalMinutes.ToString("00") + ":" + total.Seconds.ToString("00");
        if (text.Equals(RightTotal))
        {
            return false;
        }
        RightTotal = text;
        return true;
    }

    private void StartLeft()
    {
        feeding.StartLeftBreast();
        leftInProgress = true;
    }

    private void StartRight()
    {
        feeding.StartRightBreast();
        rightInProgress = true;
    }

    private async Task ToggleLeft()
    {
        if (!startTime.HasValue)
        {
            startTime = DateTime.Now;
        }
        if (leftInProgress)
        {
            feeding.EndLeftBreast();
            leftInProgress = false;
        }
        else
        {
            if (rightInProgress)
            {
                feeding.EndRightBreast();
                rightInProgress = false;
            }
            StartLeft();
        }

        await Save();
    }

    private async Task ToggleRight()
    {
        if (!startTime.HasValue)
        {
            startTime = DateTime.Now;
        }
        if (rightInProgress)
        {
            feeding.EndRightBreast();
            rightInProgress = false;
        }
        else
        {
            if (leftInProgress)
            {
                feeding.EndLeftBreast();
                leftInProgress = false;
            }
            StartRight();
        }

        await Save();
    }
}